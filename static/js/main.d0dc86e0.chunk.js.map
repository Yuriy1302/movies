{"version":3,"sources":["components/CardMovie/CardMovie.jsx","components/CardMovie/index.js","movie-service/movie-service.js","components/App/App.jsx","components/App/index.js","index.js"],"names":["CardMovie","croppingText","text","length","slice","indexOf","transformGenreName","genreId","props","genreNames","filter","id","name","Content","Layout","this","title","posterPath","overview","releaseDate","genreIds","dateRelise","format","Date","Item","key","className","hoverable","cover","src","alt","direction","map","item","React","Component","defaultProps","MovieService","apiKey","baseApi","transformSearchMovies","movie","popularity","voteAverage","vote_average","originalTitle","original_title","poster_path","release_date","genre_ids","fetch","resolve","ok","Error","status","json","page","getResource","body","results","api_key","genres","App","movieService","onError","setState","error","loading","addGenreNames","getGenreNames","then","catch","onSearchMoviesListLoaded","moviesList","updateSearchMovies","getSearchMovies","handleChange","value","defaultPage","state","debouncedUpdate","debounce","defaultSearchMovie","type","message","description","style","width","fontSize","showIcon","size","placeholder","margin","onChange","target","justify","grid","gutter","md","dataSource","renderItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0dc86e0.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout, List, Card, Space, Tag } from 'antd';\nimport { format } from 'date-fns';\nimport PropTypes from 'prop-types';\n\nimport './CardMovie.css';\nimport '../../../node_modules/typeface-inter/inter.css'; // font 'Inter'\n\nclass CardMovie extends React.Component {\n  static defaultProps = {\n    title: '',\n    posterPath: '',\n    overview: '',\n    releaseDate: '',\n  };\n\n  static propTypes = {\n    genreNames: PropTypes.arrayOf(PropTypes.object).isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    posterPath: PropTypes.string,\n    overview: PropTypes.string,\n    releaseDate: PropTypes.string,\n    genreIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  };\n\n  croppingText = (text) => {\n    if (text.length < 160) {\n      return text;\n    }\n    return `${text.slice(0, text.indexOf(' ', 160))} ...`;\n  };\n\n  transformGenreName = (genreId) => {\n    const { genreNames } = this.props;\n    const [el] = genreNames.filter(({ id }) => genreId === id);\n    return el.name;\n  };\n\n  render() {\n    const { Content } = Layout;\n\n    const { id, title, posterPath, overview, releaseDate, genreIds } = this.props;\n\n    const dateRelise = releaseDate ? format(new Date(releaseDate), 'MMMM dd, yyyy') : '-';\n\n    return (\n      <List.Item key={id}>\n        <Card\n          className=\"card-movie\"\n          hoverable\n          cover={\n            posterPath ? (\n              <img src={`http://image.tmdb.org/t/p/w185${posterPath}`} alt=\"Poster\" />\n            ) : (\n              <div className=\"no-poster\">\n                <i>No poster</i>\n              </div>\n            )\n          }\n        >\n          <Space direction=\"vertical\">\n            <h5 className=\"card-movie__title\">{title}</h5>\n            <span className=\"card-movie__date\">{dateRelise}</span>\n            <Content>\n              {genreIds.map((item) => (\n                <Tag key={item}>{this.transformGenreName(item)}</Tag>\n              ))}\n            </Content>\n            <p className=\"card-movie__overview\">{this.croppingText(overview)}</p>\n          </Space>\n        </Card>\n      </List.Item>\n    );\n  }\n}\n\nexport default CardMovie;\n","import CardMovie from './CardMovie';\r\n\r\nexport default CardMovie;","export default class MovieService {\n  apiKey = '?api_key=05f7db0eb20b02a8803d7f7d0f3fb520';\n\n  baseApi = 'https://api.themoviedb.org/3';\n\n  async getResource(movie) {\n    try {\n      const resolve = await fetch(movie);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch ${movie} received ${resolve.status}`);\n      }\n\n      return await resolve.json();\n    } catch (error) {\n      throw new Error(`There is an error in getting resources -> `, error);\n    }\n  }\n\n  async getSearchMovies(movie, page) {\n    try {\n      const body = await this.getResource(\n        `${this.baseApi}/search/movie${this.apiKey}&language=en-US&query=${movie}&page=${page}&include_adult=false`\n      );\n      return body.results.map(this.transformSearchMovies);\n    } catch (error) {\n      throw new Error(`There is an error in search movies -> `, error);\n    }\n  }\n\n  async getGenreNames() {\n    try {\n      const resolve = await fetch(`${this.baseApi}/genre/movie/list${this.api_key}&language=en-US`);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch 'genre' received ${resolve.status}`);\n      }\n\n      const body = await resolve.json();\n      return body.genres;\n    } catch (error) {\n      throw new Error(`There is an error in getting genres -> `, error);\n    }\n  }\n\n  transformSearchMovies = (movie) => {\n    return {\n      id: movie.id,\n      popularity: movie.popularity,\n      voteAverage: movie.vote_average,\n      title: movie.title,\n      originalTitle: movie.original_title,\n      overview: movie.overview,\n      posterPath: movie.poster_path,\n      releaseDate: movie.release_date,\n      genreIds: movie.genre_ids,\n    };\n  };\n}\n","import React, { Component } from 'react';\nimport { debounce } from 'lodash';\nimport { Layout, List, Spin, Alert, Input } from 'antd';\nimport PropTypes from 'prop-types';\n\nimport CardMovie from '../CardMovie';\n\nimport MovieService from '../../movie-service/movie-service';\n\nimport 'antd/dist/antd.css';\n\nimport './App.css';\n\nclass App extends Component {\n  movieService = new MovieService();\n\n  static defaultProps = {\n    defaultPage: 1,\n    defaultSearchMovie: 'return',\n  };\n\n  static propTypes = {\n    defaultPage: PropTypes.number,\n    defaultSearchMovie: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // searchMovie: '',\n      moviesList: [],\n      genreNames: [],\n      error: false,\n      loading: true,\n    };\n    this.debouncedUpdate = debounce((value) => this.handleChange(value), 1500);\n  }\n\n  componentDidMount() {\n    const { defaultSearchMovie, defaultPage } = this.props;\n    this.addGenreNames();\n    this.updateSearchMovies(defaultSearchMovie, defaultPage);\n  }\n\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false,\n    });\n  };\n\n  addGenreNames = () => {\n    this.movieService\n      .getGenreNames()\n      .then((genreNames) => this.setState({ genreNames }))\n      .catch(this.onError);\n  };\n\n  onSearchMoviesListLoaded = (moviesList) => {\n    this.setState({\n      moviesList,\n      loading: false,\n    });\n  };\n\n  updateSearchMovies = (movie, page) => {\n    this.movieService.getSearchMovies(movie, page).then(this.onSearchMoviesListLoaded).catch(this.onError);\n  };\n\n  handleChange = (value) => {\n    if (value.length < 1) {\n      return;\n    }\n    const { defaultPage } = this.props;\n    this.updateSearchMovies(value, defaultPage);\n  };\n\n  render() {\n    const { Content } = Layout;\n\n    const { error, loading, moviesList, genreNames } = this.state;\n\n    if (error) {\n      return (\n        <div className=\"alert_example\">\n          <Alert\n            type=\"warning\"\n            message=\"Oops!\"\n            description=\"Something went wrong!\"\n            style={{ width: 300, fontSize: 18 }}\n            showIcon\n          />\n        </div>\n      );\n    }\n\n    if (loading) {\n      return (\n        <div className=\"example\">\n          <Spin size=\"large\" />\n        </div>\n      );\n    }\n\n    return (\n      <Layout className=\"container\">\n        <Content>\n          <Input\n            placeholder=\"Type to search...\"\n            size=\"large\"\n            style={{ width: '100%', margin: '20px 0' }}\n            onChange={({ target: { value } }) => this.debouncedUpdate(value)}\n          />\n        </Content>\n        <Content>\n          <List\n            className=\"list-align\"\n            justify=\"space-around\"\n            grid={{\n              gutter: 36,\n              md: 2,\n            }}\n            dataSource={moviesList}\n            renderItem={(item) => (\n              <CardMovie\n                id={item.id}\n                title={item.title}\n                posterPath={item.posterPath}\n                overview={item.overview}\n                releaseDate={item.releaseDate}\n                genreIds={item.genreIds}\n                genreNames={genreNames}\n              />\n            )}\n          />\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}