{"version":3,"sources":["components/CardMovie/CardMovie.jsx","components/CardMovie/index.js","movie-service/movie-service.js","components/App/App.jsx","components/App/index.js","index.js"],"names":["CardMovie","croppingText","text","slice","indexOf","transformGenreName","genreId","props","genreNames","filter","id","name","Content","Layout","this","title","posterPath","overview","releaseDate","genreIds","dateRelise","format","Date","Item","key","className","hoverable","cover","src","alt","direction","map","item","React","Component","defaultProps","MovieService","transformSearchMovies","movie","popularity","voteAverage","vote_average","originalTitle","original_title","poster_path","release_date","genre_ids","fetch","resolve","ok","Error","status","json","searchMovie","getResource","body","results","genres","App","movieService","onError","setState","error","loading","addGenreNames","getGenreNames","then","catch","onSearchMoviesListLoaded","moviesList","updateSearchMovies","getSearchMovies","defaultCurrent","state","type","message","description","style","width","fontSize","showIcon","size","justify","grid","gutter","md","dataSource","renderItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d8509c3.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout, List, Card, Space, Tag } from 'antd';\nimport { format } from 'date-fns';\nimport PropTypes from 'prop-types';\n\nimport './CardMovie.css';\nimport '../../../node_modules/typeface-inter/inter.css'; // font 'Inter'\n\nclass CardMovie extends React.Component {\n  static defaultProps = {\n    title: '',\n    posterPath: '',\n    overview: '',\n    releaseDate: '',\n  };\n\n  static propTypes = {\n    genreNames: PropTypes.arrayOf(PropTypes.object).isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    posterPath: PropTypes.string,\n    overview: PropTypes.string,\n    releaseDate: PropTypes.string,\n    genreIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  };\n\n  croppingText = (text) => {\n    return `${text.slice(0, text.indexOf(' ', 200))} ...`;\n  };\n\n  transformGenreName = (genreId) => {\n    const { genreNames } = this.props;\n    const [el] = genreNames.filter(({ id }) => genreId === id);\n    return el.name;\n  };\n\n  render() {\n    const { Content } = Layout;\n\n    const { id, title, posterPath, overview, releaseDate, genreIds } = this.props;\n\n    const dateRelise = format(new Date(releaseDate), 'MMMM dd, yyyy');\n\n    return (\n      <List.Item key={id}>\n        <Card\n          className=\"card-movie\"\n          hoverable\n          cover={\n            posterPath ? (\n              <img src={`http://image.tmdb.org/t/p/w185${posterPath}`} alt=\"Poster\" />\n            ) : (\n              <span className=\"no-poster\">\n                <i>No poster</i>\n              </span>\n            )\n          }\n        >\n          <Space direction=\"vertical\">\n            <h5 className=\"card-movie__title\">{title}</h5>\n            <span className=\"card-movie__date\">{dateRelise}</span>\n            <Content>\n              {genreIds.map((item) => (\n                <Tag key={item}>{this.transformGenreName(item)}</Tag>\n              ))}\n            </Content>\n            <p className=\"card-movie__overview\">{this.croppingText(overview)}</p>\n          </Space>\n        </Card>\n      </List.Item>\n    );\n  }\n}\n\nexport default CardMovie;\n","import CardMovie from './CardMovie';\r\n\r\nexport default CardMovie;","export default class MovieService {\n  async getResource(movie) {\n    try {\n      const resolve = await fetch(movie);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch ${movie} received ${resolve.status}`);\n      }\n\n      return await resolve.json();\n    } catch (error) {\n      throw new Error(`There is an error in getting resources -> `, error);\n    }\n  }\n\n  async getSearchMovies(searchMovie) {\n    try {\n      const body = await this.getResource(searchMovie);\n      return body.results.map(this.transformSearchMovies);\n    } catch (error) {\n      throw new Error(`There is an error in search movies -> `, error);\n    }\n  }\n\n  async getGenreNames() {\n    try {\n      const resolve = await fetch(\n        'https://api.themoviedb.org/3/genre/movie/list?api_key=05f7db0eb20b02a8803d7f7d0f3fb520&language=en-US'\n      );\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch 'genre' received ${resolve.status}`);\n      }\n\n      const body = await resolve.json();\n      return body.genres;\n    } catch (error) {\n      throw new Error(`There is an error in getting genres -> `, error);\n    }\n  }\n\n  transformSearchMovies = (movie) => {\n    return {\n      id: movie.id,\n      popularity: movie.popularity,\n      voteAverage: movie.vote_average,\n      title: movie.title,\n      originalTitle: movie.original_title,\n      overview: movie.overview,\n      posterPath: movie.poster_path,\n      releaseDate: movie.release_date,\n      genreIds: movie.genre_ids,\n    };\n  };\n}\n","import React, { Component } from 'react';\nimport { Layout, List, Spin, Alert } from 'antd';\nimport PropTypes from 'prop-types';\n\nimport CardMovie from '../CardMovie';\n\nimport MovieService from '../../movie-service/movie-service';\n\nimport 'antd/dist/antd.css';\n\nimport './App.css';\n\nclass App extends Component {\n  movieService = new MovieService();\n\n  static defaultProps = {\n    defaultCurrent: 1,\n  };\n\n  static propTypes = {\n    defaultCurrent: PropTypes.number,\n  };\n\n  constructor(props) {\n    super(props);\n    const { defaultCurrent } = this.props;\n    this.state = {\n      searchMovie: `https://api.themoviedb.org/3/search/movie?api_key=05f7db0eb20b02a8803d7f7d0f3fb520&language=en-US&query=return&page=${defaultCurrent}&include_adult=false`,\n      moviesList: [],\n      genreNames: [],\n      error: false,\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    const { searchMovie } = this.state;\n    this.addGenreNames();\n    this.updateSearchMovies(searchMovie);\n  }\n\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false,\n    });\n  };\n\n  addGenreNames = () => {\n    this.movieService\n      .getGenreNames()\n      .then((genreNames) => this.setState({ genreNames }))\n      .catch(this.onError);\n  };\n\n  onSearchMoviesListLoaded = (moviesList) => {\n    this.setState({\n      moviesList,\n      loading: false,\n    });\n  };\n\n  updateSearchMovies = (movie) => {\n    this.movieService.getSearchMovies(movie).then(this.onSearchMoviesListLoaded).catch(this.onError);\n  };\n\n  render() {\n    const { Content } = Layout;\n\n    const { error, loading, moviesList, genreNames } = this.state;\n\n    if (error) {\n      return (\n        <div className=\"alert_example\">\n          <Alert\n            type=\"warning\"\n            message=\"Oops!\"\n            description=\"Something went wrong!\"\n            style={{ width: 300, fontSize: 18 }}\n            showIcon\n          />\n        </div>\n      );\n    }\n\n    if (loading) {\n      return (\n        <div className=\"example\">\n          <Spin size=\"large\" />\n        </div>\n      );\n    }\n\n    return (\n      <Layout className=\"container\">\n        <Content>\n          <List\n            className=\"list-align\"\n            justify=\"space-around\"\n            grid={{\n              gutter: 36,\n              md: 2,\n            }}\n            dataSource={moviesList}\n            renderItem={(item) => (\n              <CardMovie\n                id={item.id}\n                title={item.title}\n                posterPath={item.posterPath}\n                overview={item.overview}\n                releaseDate={item.releaseDate}\n                genreIds={item.genreIds}\n                genreNames={genreNames}\n              />\n            )}\n          />\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}