{"version":3,"sources":["components/CardMovie/CardMovie.jsx","components/CardMovie/index.js","components/SearchMovie/index.js","components/SearchMovie/SearchMovie.jsx","components/PaginationMoviesList/index.js","components/PaginationMoviesList/PaginationMoviesList.jsx","movie-service/movie-service.js","components/App/App.jsx","components/App/index.js","index.js"],"names":["CardMovie","croppingText","text","length","slice","indexOf","transformGenreName","genreId","props","genreNames","filter","id","name","ratingColor","va","Content","Layout","this","title","posterPath","overview","releaseDate","genreIds","voteAverage","dateRelise","format","Date","classRatingColor","borderColor","Item","key","className","hoverable","cover","src","alt","direction","map","item","style","React","Component","defaultProps","SearchMovie","onDebounced","debouncedUpdate","debounce","value","placeholder","size","width","margin","onChange","target","PaginationMoviesList","defaultPage","page","totalResults","onPageChange","showSizeChanger","defaultPageSize","defaultCurrent","current","total","MovieService","apiKey","baseApi","transformSearchMovies","movie","popularity","vote_average","originalTitle","original_title","poster_path","release_date","genre_ids","fetch","resolve","ok","Error","status","json","getResource","body","console","log","total_results","results","genres","App","movieService","componentDidUpdate","prevProps","prevState","state","searchMovie","updateSearchMovies","window","scroll","onError","setState","error","loading","addGenreNames","getGenreNames","then","catch","onSearchMoviesListLoaded","res","moviesList","getSearchMovies","renderEmpty","image","imageStyle","height","defaultSearchMovie","type","message","description","fontSize","showIcon","justify","grid","gutter","md","dataSource","renderItem","ReactDOM","render","document","getElementById"],"mappings":"uaAQMA,G,0NAmBJC,aAAe,SAACC,GACd,OAAIA,EAAKC,OAAS,IACTD,EAEH,GAAN,OAAUA,EAAKE,MAAM,EAAGF,EAAKG,QAAQ,IAAK,MAA1C,S,EAGFC,mBAAqB,SAACC,GAAa,IAAD,EACT,EAAKC,MAApBC,WACgBC,QAAO,gBAAGC,EAAH,EAAGA,GAAH,OAAYJ,IAAYI,KACvD,OAHgC,oBAGtBC,M,EAGZC,YAAc,SAACC,GACb,OAAIA,EAAK,EAAU,UACfA,EAAK,EAAU,UACfA,EAAK,EAAU,UACZ,W,uDAGC,IAAD,OACCC,EAAYC,IAAZD,QADD,EAGyEE,KAAKT,MAA7EG,EAHD,EAGCA,GAAIO,EAHL,EAGKA,MAAOC,EAHZ,EAGYA,WAAYC,EAHxB,EAGwBA,SAAUC,EAHlC,EAGkCA,YAAaC,EAH/C,EAG+CA,SAAUC,EAHzD,EAGyDA,YAE1DC,EAAaH,EAAcI,YAAO,IAAIC,KAAKL,GAAc,iBAAmB,IAE5EM,EAAmB,CACvBC,YAAaX,KAAKJ,YAAYU,IAGhC,OACE,kBAAC,IAAKM,KAAN,CAAWC,IAAKnB,GACd,kBAAC,IAAD,CACEoB,UAAU,aACVC,WAAS,EACTC,MACEd,EACE,yBAAKe,IAAG,wCAAmCf,GAAcgB,IAAI,WAE7D,yBAAKJ,UAAU,aACb,0CAKN,kBAAC,IAAD,CAAOK,UAAU,YACf,wBAAIL,UAAU,qBAAqBb,GACnC,0BAAMa,UAAU,oBAAoBP,GACpC,kBAACT,EAAD,KACGO,EAASe,KAAI,SAACC,GAAD,OACZ,kBAAC,IAAD,CAAKR,IAAKQ,GAAO,EAAKhC,mBAAmBgC,QAG7C,uBAAGP,UAAU,wBAAwBd,KAAKhB,aAAamB,KAEzD,yBAAKW,UAAU,SAASQ,MAAOZ,GAC5BJ,S,GA5EWiB,IAAMC,YAAxBzC,EACG0C,aAAe,CACpBxB,MAAO,GACPC,WAAY,GACZC,SAAU,GACVC,YAAa,IA+EFrB,IC1FAA,ED0FAA,E,kBE1FA2C,G,yDCWb,WAAYnC,GAAQ,IAAD,0BAEToC,GADR,cAAMpC,IACuBA,MAArBoC,YAFS,OAGjB,EAAKC,gBAAkBC,oBAAS,SAACC,GAAD,OAAWH,EAAYG,KAAQ,MAH9C,E,qDAMT,IAAD,OACP,OACE,kBAAC,IAAD,CACEC,YAAY,oBACZC,KAAK,QACLV,MAAO,CAAEW,MAAO,OAAQC,OAAQ,UAChCC,SAAU,gBAAaL,EAAb,EAAGM,OAAUN,MAAb,OAA2B,EAAKF,gBAAgBE,U,GAjBxCP,IAAMC,Y,SCNjBa,G,aCKc,SAAC9C,GAAW,IAC/B+C,EAAkD/C,EAAlD+C,YAAaC,EAAqChD,EAArCgD,KAAMC,EAA+BjD,EAA/BiD,aAAcC,EAAiBlD,EAAjBkD,aAEzC,OACE,kBAAC,IAAD,CACEnB,MAAO,CAAEY,OAAQ,aACjBF,KAAK,QACLU,iBAAiB,EACjBC,gBAAiB,GACjBC,eAAgBN,EAChBO,QAASN,EACTO,MAAON,EACPL,SAAUM,M,yBCnBKM,E,iDACnBC,OAAS,4C,KAETC,QAAU,+B,KA6CVC,sBAAwB,SAACC,GACvB,MAAO,CACLzD,GAAIyD,EAAMzD,GACV0D,WAAYD,EAAMC,WAClB9C,YAAa6C,EAAME,aACnBpD,MAAOkD,EAAMlD,MACbqD,cAAeH,EAAMI,eACrBpD,SAAUgD,EAAMhD,SAChBD,WAAYiD,EAAMK,YAClBpD,YAAa+C,EAAMM,aACnBpD,SAAU8C,EAAMO,Y,iGArDFP,G,gGAEQQ,MAAMR,G,WAAtBS,E,QAEOC,G,sBACL,IAAIC,MAAJ,0BAA6BX,EAA7B,qBAA+CS,EAAQG,S,uBAGlDH,EAAQI,O,gFAEf,IAAIF,MAAJ,mD,gMAIYX,EAAOZ,G,oGAENvC,KAAKiE,YAAL,UACdjE,KAAKiD,QADS,wBACcjD,KAAKgD,OADnB,iCACkDG,EADlD,iBACgEZ,EADhE,yB,cAAb2B,E,OAGNC,QAAQC,IAAI,WAAYF,GAClB1B,EAAe0B,EAAKG,cACpBC,EAAUJ,EAAKI,QAAQlD,IAAIpB,KAAKkD,uB,kBAC/B,CAAEV,eAAc8B,Y,wCAEjB,IAAIR,MAAJ,+C,oSAMgBH,MAAM,GAAD,OAAI3D,KAAKiD,QAAT,4BAAoCjD,KAAKgD,OAAzC,oB,WAArBY,E,QAEOC,G,sBACL,IAAIC,MAAJ,2CAA8CF,EAAQG,S,uBAG3CH,EAAQI,O,cAArBE,E,yBACCA,EAAKK,Q,wCAEN,IAAIT,MAAJ,gD,uHC9BNU,G,yDAeJ,WAAYjF,GAAQ,IAAD,uBACjB,cAAMA,IAfRkF,aAAe,IAAI1B,EAcA,EAoBnB2B,mBAAqB,SAACC,EAAWC,GAAe,IAAD,EACf,EAAKC,MAA3BtC,EADqC,EACrCA,KAAMuC,EAD+B,EAC/BA,YACVvC,IAASqC,EAAUrC,MACrB,EAAKwC,mBAAmBD,EAAavC,GAEvCyC,OAAOC,OAAO,EAAG,IAzBA,EA4BnBC,QAAU,WACR,EAAKC,SAAS,CACZC,OAAO,EACPC,SAAS,KA/BM,EAmCnBC,cAAgB,WACd,EAAKb,aACFc,gBACAC,MAAK,SAAChG,GAAD,OAAgB,EAAK2F,SAAS,CAAE3F,kBACrCiG,MAAM,EAAKP,UAvCG,EA0CnBQ,yBAA2B,SAACC,GAC1B,EAAKR,SAAS,CACZS,WAAYD,EAAIrB,QAChB9B,aAAcmD,EAAInD,aAClB6C,SAAS,KA9CM,EAkDnBN,mBAAqB,SAAC5B,EAAOZ,GAC3B,EAAKkC,aAAaoB,gBAAgB1C,EAAOZ,GAAMiD,KAAK,EAAKE,0BAA0BD,MAAM,EAAKP,UAnD7E,EAsDnBvD,YAAc,SAACG,GACb,KAAIA,EAAM5C,OAAS,GAAnB,CADuB,MAIO,EAAKK,MAA3BgD,EAJe,EAIfA,KAAMD,EAJS,EAITA,YACd,EAAK6C,SAAS,CACZL,YAAahD,EACbS,KAAMD,IAER,EAAKyC,mBAAmBjD,EAAOS,KA/Dd,EAkEnBE,aAAe,SAACF,GACd,EAAK4C,SAAS,CAAE5C,UAnEC,EAsEnBuD,YAAc,WACZ,OACE,kBAAC,IAAD,CAAOC,MAAM,kEAAkEC,WAAY,CAAEC,OAAQ,KACnG,sEACA,8DA1Ea,MAE2B,EAAK1G,MAAzC2G,EAFS,EAETA,mBAAoB5D,EAFX,EAEWA,YAFX,OAGjB,EAAKuC,MAAQ,CACXC,YAAaoB,EACb3D,KAAMD,EACNsD,WAAY,GACZpD,aAAc,KACdhD,WAAY,GACZ4F,OAAO,EACPC,SAAS,GAVM,E,gEAcE,IAAD,EAC0BrF,KAAKT,MAAzC2G,EADU,EACVA,mBAAoB5D,EADV,EACUA,YAC5BtC,KAAKsF,gBACLtF,KAAK+E,mBAAmBmB,EAAoB5D,K,+BA8DpC,IACAxC,EAAYC,IAAZD,QADD,EAGgEE,KAAK6E,MAApEO,EAHD,EAGCA,MAAOC,EAHR,EAGQA,QAASO,EAHjB,EAGiBA,WAAYpG,EAH7B,EAG6BA,WAAY+C,EAHzC,EAGyCA,KAAMC,EAH/C,EAG+CA,aAC9CF,EAAgBtC,KAAKT,MAArB+C,YAER,OAAI8C,EAEA,yBAAKtE,UAAU,iBACb,kBAAC,IAAD,CACEqF,KAAK,UACLC,QAAQ,QACRC,YAAY,wBACZ/E,MAAO,CAAEW,MAAO,IAAKqE,SAAU,IAC/BC,UAAQ,KAMZlB,EAEA,yBAAKvE,UAAU,WACb,kBAAC,IAAD,CAAMkB,KAAK,WAMf,kBAAC,IAAD,CAAQlB,UAAU,aAChB,kBAAChB,EAAD,KACE,kBAAC,EAAD,CAAa6B,YAAa3B,KAAK2B,eAEjC,kBAAC7B,EAAD,KACG8F,EAAW1G,OACV,kBAAC,IAAD,CACE4B,UAAU,aACV0F,QAAQ,eACRC,KAAM,CACJC,OAAQ,GACRC,GAAI,GAENC,WAAYhB,EACZiB,WAAY,SAACxF,GAAD,OACV,kBAAC,EAAD,CACE3B,GAAI2B,EAAK3B,GACTO,MAAOoB,EAAKpB,MACZC,WAAYmB,EAAKnB,WACjBC,SAAUkB,EAAKlB,SACfC,YAAaiB,EAAKjB,YAClBC,SAAUgB,EAAKhB,SACfC,YAAae,EAAKf,YAClBd,WAAYA,OAKlBQ,KAAK8F,eAGRtD,EAAe,GACd,kBAAC,EAAD,CACEF,YAAaA,EACbC,KAAMA,EACNC,aAAcA,EACdC,aAAczC,KAAKyC,eAEnB,U,GAjKMjB,cAAZgD,EAGG/C,aAAe,CACpBa,YAAa,EACb4D,mBAAoB,SACpB3D,KANEiC,EAMSlC,aAiKAkC,ICnLAA,EDmLAA,E,OE7KfsC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.3adedf66.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout, List, Card, Space, Tag } from 'antd';\nimport { format } from 'date-fns';\nimport PropTypes from 'prop-types';\n\nimport './CardMovie.css';\nimport '../../../node_modules/typeface-inter/inter.css'; // font 'Inter'\n\nclass CardMovie extends React.Component {\n  static defaultProps = {\n    title: '',\n    posterPath: '',\n    overview: '',\n    releaseDate: '',\n  };\n\n  static propTypes = {\n    genreNames: PropTypes.arrayOf(PropTypes.object).isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    posterPath: PropTypes.string,\n    overview: PropTypes.string,\n    releaseDate: PropTypes.string,\n    genreIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    voteAverage: PropTypes.number.isRequired,\n  };\n\n  croppingText = (text) => {\n    if (text.length < 100) {\n      return text;\n    }\n    return `${text.slice(0, text.indexOf(' ', 100))} ...`;\n  };\n\n  transformGenreName = (genreId) => {\n    const { genreNames } = this.props;\n    const [el] = genreNames.filter(({ id }) => genreId === id);\n    return el.name;\n  };\n\n  ratingColor = (va) => {\n    if (va > 7) return '#66e900';\n    if (va > 5) return '#e9d100';\n    if (va > 3) return '#e97e00';\n    return '#e90000';\n  };\n\n  render() {\n    const { Content } = Layout;\n\n    const { id, title, posterPath, overview, releaseDate, genreIds, voteAverage } = this.props;\n\n    const dateRelise = releaseDate ? format(new Date(releaseDate), 'MMMM dd, yyyy') : '-';\n\n    const classRatingColor = {\n      borderColor: this.ratingColor(voteAverage),\n    };\n\n    return (\n      <List.Item key={id}>\n        <Card\n          className=\"card-movie\"\n          hoverable\n          cover={\n            posterPath ? (\n              <img src={`http://image.tmdb.org/t/p/w185${posterPath}`} alt=\"Poster\" />\n            ) : (\n              <div className=\"no-poster\">\n                <i>No poster</i>\n              </div>\n            )\n          }\n        >\n          <Space direction=\"vertical\">\n            <h5 className=\"card-movie__title\">{title}</h5>\n            <span className=\"card-movie__date\">{dateRelise}</span>\n            <Content>\n              {genreIds.map((item) => (\n                <Tag key={item}>{this.transformGenreName(item)}</Tag>\n              ))}\n            </Content>\n            <p className=\"card-movie__overview\">{this.croppingText(overview)}</p>\n          </Space>\n          <div className=\"rating\" style={classRatingColor}>\n            {voteAverage}\n          </div>\n        </Card>\n      </List.Item>\n    );\n  }\n}\n\nexport default CardMovie;\n","import CardMovie from './CardMovie';\r\n\r\nexport default CardMovie;","import SearchMovie from './SearchMovie';\n\nexport default SearchMovie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { debounce } from 'lodash';\n\nimport { Input } from 'antd';\nimport './SearchMovie.css';\n\nclass SearchMovie extends React.Component {\n  static propTypes = {\n    onDebounced: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    const { onDebounced } = this.props;\n    this.debouncedUpdate = debounce((value) => onDebounced(value), 1500);\n  }\n\n  render() {\n    return (\n      <Input\n        placeholder=\"Type to search...\"\n        size=\"large\"\n        style={{ width: '100%', margin: '20px 0' }}\n        onChange={({ target: { value } }) => this.debouncedUpdate(value)}\n      />\n    );\n  }\n}\n\nexport default SearchMovie;\n","import PaginationMoviesList from './PaginationMoviesList';\n\nexport default PaginationMoviesList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Pagination } from 'antd';\nimport 'antd/dist/antd.css';\nimport './PaginationMoviesList.css';\n\nconst PaginationMoviesList = (props) => {\n  const { defaultPage, page, totalResults, onPageChange } = props;\n\n  return (\n    <Pagination\n      style={{ margin: '10px auto' }}\n      size=\"small\"\n      showSizeChanger={false}\n      defaultPageSize={20}\n      defaultCurrent={defaultPage}\n      current={page}\n      total={totalResults}\n      onChange={onPageChange}\n    />\n  );\n};\n\nPaginationMoviesList.propTypes = {\n  defaultPage: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  totalResults: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default PaginationMoviesList;\n","export default class MovieService {\n  apiKey = '?api_key=05f7db0eb20b02a8803d7f7d0f3fb520';\n\n  baseApi = 'https://api.themoviedb.org/3';\n\n  async getResource(movie) {\n    try {\n      const resolve = await fetch(movie);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch ${movie} received ${resolve.status}`);\n      }\n\n      return await resolve.json();\n    } catch (error) {\n      throw new Error(`There is an error in getting resources -> `, error);\n    }\n  }\n\n  async getSearchMovies(movie, page) {\n    try {\n      const body = await this.getResource(\n        `${this.baseApi}/search/movie${this.apiKey}&language=en-US&query=${movie}&page=${page}&include_adult=false`\n      );\n      console.log('body => ', body);\n      const totalResults = body.total_results;\n      const results = body.results.map(this.transformSearchMovies);\n      return { totalResults, results };\n    } catch (error) {\n      throw new Error(`There is an error in search movies -> `, error);\n    }\n  }\n\n  async getGenreNames() {\n    try {\n      const resolve = await fetch(`${this.baseApi}/genre/movie/list${this.apiKey}&language=en-US`);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch 'genre' received ${resolve.status}`);\n      }\n\n      const body = await resolve.json();\n      return body.genres;\n    } catch (error) {\n      throw new Error(`There is an error in getting genres -> `, error);\n    }\n  }\n\n  transformSearchMovies = (movie) => {\n    return {\n      id: movie.id,\n      popularity: movie.popularity,\n      voteAverage: movie.vote_average,\n      title: movie.title,\n      originalTitle: movie.original_title,\n      overview: movie.overview,\n      posterPath: movie.poster_path,\n      releaseDate: movie.release_date,\n      genreIds: movie.genre_ids,\n    };\n  };\n}\n","import React, { Component } from 'react';\nimport { Layout, List, Spin, Alert, Empty } from 'antd';\nimport PropTypes from 'prop-types';\n\nimport CardMovie from '../CardMovie';\nimport SearchMovie from '../SearchMovie';\nimport PaginationMoviesList from '../PaginationMoviesList';\n\nimport MovieService from '../../movie-service/movie-service';\n\nimport 'antd/dist/antd.css';\n\nimport './App.css';\n\nclass App extends Component {\n  movieService = new MovieService();\n\n  static defaultProps = {\n    defaultPage: 1,\n    defaultSearchMovie: 'return',\n    page: this.defaultPage,\n  };\n\n  static propTypes = {\n    page: PropTypes.number,\n    defaultPage: PropTypes.number,\n    defaultSearchMovie: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n    const { defaultSearchMovie, defaultPage } = this.props;\n    this.state = {\n      searchMovie: defaultSearchMovie,\n      page: defaultPage,\n      moviesList: [],\n      totalResults: null,\n      genreNames: [],\n      error: false,\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    const { defaultSearchMovie, defaultPage } = this.props;\n    this.addGenreNames();\n    this.updateSearchMovies(defaultSearchMovie, defaultPage);\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    const { page, searchMovie } = this.state;\n    if (page !== prevState.page) {\n      this.updateSearchMovies(searchMovie, page);\n    }\n    window.scroll(0, 0);\n  };\n\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false,\n    });\n  };\n\n  addGenreNames = () => {\n    this.movieService\n      .getGenreNames()\n      .then((genreNames) => this.setState({ genreNames }))\n      .catch(this.onError);\n  };\n\n  onSearchMoviesListLoaded = (res) => {\n    this.setState({\n      moviesList: res.results,\n      totalResults: res.totalResults,\n      loading: false,\n    });\n  };\n\n  updateSearchMovies = (movie, page) => {\n    this.movieService.getSearchMovies(movie, page).then(this.onSearchMoviesListLoaded).catch(this.onError);\n  };\n\n  onDebounced = (value) => {\n    if (value.length < 1) {\n      return;\n    }\n    const { page, defaultPage } = this.props;\n    this.setState({\n      searchMovie: value,\n      page: defaultPage,\n    });\n    this.updateSearchMovies(value, page);\n  };\n\n  onPageChange = (page) => {\n    this.setState({ page });\n  };\n\n  renderEmpty = () => {\n    return (\n      <Empty image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\" imageStyle={{ height: 60 }}>\n        <h6>The search did not return any results.</h6>\n        <span>Try changing your request.</span>\n      </Empty>\n    );\n  };\n\n  render() {\n    const { Content } = Layout;\n\n    const { error, loading, moviesList, genreNames, page, totalResults } = this.state;\n    const { defaultPage } = this.props;\n\n    if (error) {\n      return (\n        <div className=\"alert_example\">\n          <Alert\n            type=\"warning\"\n            message=\"Oops!\"\n            description=\"Something went wrong!\"\n            style={{ width: 300, fontSize: 18 }}\n            showIcon\n          />\n        </div>\n      );\n    }\n\n    if (loading) {\n      return (\n        <div className=\"example\">\n          <Spin size=\"large\" />\n        </div>\n      );\n    }\n\n    return (\n      <Layout className=\"container\">\n        <Content>\n          <SearchMovie onDebounced={this.onDebounced} />\n        </Content>\n        <Content>\n          {moviesList.length ? (\n            <List\n              className=\"list-align\"\n              justify=\"space-around\"\n              grid={{\n                gutter: 36,\n                md: 2,\n              }}\n              dataSource={moviesList}\n              renderItem={(item) => (\n                <CardMovie\n                  id={item.id}\n                  title={item.title}\n                  posterPath={item.posterPath}\n                  overview={item.overview}\n                  releaseDate={item.releaseDate}\n                  genreIds={item.genreIds}\n                  voteAverage={item.voteAverage}\n                  genreNames={genreNames}\n                />\n              )}\n            />\n          ) : (\n            this.renderEmpty()\n          )}\n        </Content>\n        {totalResults > 20 ? (\n          <PaginationMoviesList\n            defaultPage={defaultPage}\n            page={page}\n            totalResults={totalResults}\n            onPageChange={this.onPageChange}\n          />\n        ) : null}\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}