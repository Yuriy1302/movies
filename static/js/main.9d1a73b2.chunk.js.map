{"version":3,"sources":["components/ContextGenres/ContextGenres.js","components/CardMovie/CardMovie.jsx","components/CardMovie/index.js","components/ErrorIndicator/index.js","components/ErrorIndicator/ErrorIndicator.jsx","components/SearchMovie/index.js","components/SearchMovie/SearchMovie.jsx","components/PaginationMoviesList/index.js","components/PaginationMoviesList/PaginationMoviesList.jsx","movie-service/movie-service.js","components/App/App.jsx","components/App/index.js","index.js"],"names":["React","createContext","GenresProvider","Provider","GenresConsumer","Consumer","CardMovie","croppingText","text","length","slice","indexOf","croppingTitle","renderGenres","genreNames","genres","props","genreIds","map","item","filter","id","key","name","ratingColor","va","Content","Layout","this","title","posterPath","overview","releaseDate","voteAverage","rating","handleRateMovie","dateRelise","format","Date","classRatingColor","borderColor","Item","className","hoverable","cover","src","alt","direction","onChange","value","defaultValue","count","allowHalf","style","fontSize","Component","defaultProps","ErrorIndicator","type","message","description","width","showIcon","SearchMovie","onDebounced","debouncedUpdate","debounce","state","hasError","setState","placeholder","size","margin","target","PaginationMoviesList","defaultPage","page","totalResults","onPageChange","showSizeChanger","defaultPageSize","defaultCurrent","current","total","MovieService","apiKey","baseApi","transformSearchMovies","movie","popularity","vote_average","originalTitle","original_title","poster_path","release_date","genre_ids","fetch","resolve","ok","Error","status","json","getResource","body","total_results","results","guestSessionID","movieId","method","headers","JSON","stringify","result","guest_session_id","App","movieService","componentDidUpdate","prevProps","prevState","moviePage","searchMovie","ratePage","updateSearchMovies","window","scroll","updateRatedMovies","onError","error","loading","addGenreNames","getGenreNames","then","catch","onSearchMoviesListLoaded","res","moviesList","movieTotalResults","getSearchMovies","onMoviePageChange","onRatePageChange","renderEmpty","image","imageStyle","height","renderEmptyRate","onRateListLoaded","rateList","rateTotalResults","getRatedMovies","postRateMovie","notification","success","duration","onChangeTabs","updateGuestSession","localStorage","setItem","createGuestSession","defaultSearchMovie","getItem","TabPane","Tabs","defaultActiveKey","centered","tab","justify","grid","gutter","md","dataSource","renderItem","ReactDOM","render","document","getElementById"],"mappings":"gdAE+DA,IAAMC,gBAAnDC,E,EAAVC,SAAoCC,E,EAAVC,SCQ5BC,G,0NAqBJC,aAAe,SAACC,GACd,OAAIA,EAAKC,OAAS,IACTD,EAEH,GAAN,OAAUA,EAAKE,MAAM,EAAGF,EAAKG,QAAQ,IAAK,MAA1C,S,EAGFC,cAAgB,SAACJ,GACf,OAAIA,EAAKC,OAAS,GACTD,EAEH,GAAN,OAAUA,EAAKE,MAAM,EAAGF,EAAKG,QAAQ,IAAK,KAA1C,S,EAGFE,aAAe,SAACC,GAAgB,IAExBC,EADe,EAAKC,MAAlBC,SAELC,KAAI,SAACC,GAAU,IAAD,EACAL,EAAWM,QAAO,gBAAGC,EAAH,EAAGA,GAAH,OAAYF,IAASE,KACpD,OAFa,uBAIdX,MAAM,EAAG,GAEZ,OACE,oCACGK,EAAOG,KAAI,SAACC,GAAD,OACV,kBAAC,IAAD,CAAKG,IAAKH,EAAKE,IAAKF,EAAKI,W,EAMjCC,YAAc,SAACC,GACb,OAAIA,EAAK,EAAU,UACfA,EAAK,EAAU,UACfA,EAAK,EAAU,UACZ,W,uDAGC,IAAD,OACCC,EAAYC,IAAZD,QADD,EAGwFE,KAAKZ,MAA5FK,EAHD,EAGCA,GAAIQ,EAHL,EAGKA,MAAOC,EAHZ,EAGYA,WAAYC,EAHxB,EAGwBA,SAAUC,EAHlC,EAGkCA,YAAaC,EAH/C,EAG+CA,YAAaC,EAH5D,EAG4DA,OAAQC,EAHpE,EAGoEA,gBAErEC,EAAaJ,EAAcK,YAAO,IAAIC,KAAKN,GAAc,iBAAmB,IAE5EO,EAAmB,CACvBC,YAAaZ,KAAKJ,YAAYS,IAGhC,OACE,kBAAC,IAAKQ,KAAN,CAAWnB,IAAKD,GACd,kBAAC,IAAD,CACEqB,UAAU,aACVC,WAAS,EACTC,MACEd,EACE,yBAAKe,IAAG,wCAAmCf,GAAcgB,IAAI,WAE7D,yBAAKJ,UAAU,aACb,0CAKN,kBAAC,IAAD,CAAOK,UAAU,YACf,wBAAIL,UAAU,qBAAqBd,KAAKhB,cAAciB,IACtD,0BAAMa,UAAU,oBAAoBN,GACpC,kBAACV,EAAD,KACE,kBAACtB,EAAD,MAAiB,SAACU,GAAD,OAAgB,EAAKD,aAAaC,OAErD,uBAAG4B,UAAU,wBAAwBd,KAAKrB,aAAawB,IACvD,kBAAC,IAAD,CACEiB,SAAU,SAACC,GAAD,OAAWd,EAAgBd,EAAI4B,IACzCC,aAAchB,EACdiB,MAAO,GACPC,WAAS,EACTC,MAAO,CAAEC,SAAU,IACnBZ,UAAU,eAEZ,yBAAKA,UAAU,SAASW,MAAOd,GAC5BN,U,GAtGSjC,IAAMuD,YAAxBjD,EACGkD,aAAe,CACpB3B,MAAO,GACPC,WAAY,GACZC,SAAU,GACVC,YAAa,GACbE,OAAQ,IAyGG5B,ICvHAA,EDuHAA,E,2BEvHAmD,G,OCGQ,WACrB,OAAO,kBAAC,IAAD,CAAOC,KAAK,QAAQC,QAAQ,QAAQC,YAAY,wBAAwBP,MAAO,CAAEQ,MAAO,KAAOC,UAAQ,MCJjGC,G,yDCYb,WAAY/C,GAAQ,IAAD,0BAETgD,GADR,cAAMhD,IACuBA,MAArBgD,YAFS,OAGjB,EAAKC,gBAAkBC,oBAAS,SAACjB,GAAD,OAAWe,EAAYf,KAAQ,KAC/D,EAAKkB,MAAQ,CACXC,UAAU,GALK,E,gEAUjBxC,KAAKyC,SAAS,CAAED,UAAU,M,+BAGlB,IAAD,OAGP,OAFqBxC,KAAKuC,MAAlBC,SAIJ,yBAAK1B,UAAU,iBACb,kBAAC,EAAD,OAMJ,kBAAC,IAAD,CACE4B,YAAY,oBACZC,KAAK,QACLlB,MAAO,CAAEQ,MAAO,OAAQW,OAAQ,UAChCxB,SAAU,gBAAaC,EAAb,EAAGwB,OAAUxB,MAAb,OAA2B,EAAKgB,gBAAgBhB,U,GAlCxCjD,IAAMuD,Y,SCPjBmB,G,cCKc,SAAC1D,GAAW,IAC/B2D,EAAkD3D,EAAlD2D,YAAaC,EAAqC5D,EAArC4D,KAAMC,EAA+B7D,EAA/B6D,aAAcC,EAAiB9D,EAAjB8D,aAEzC,OACE,kBAAC,IAAD,CACEzB,MAAO,CAAEmB,OAAQ,aACjBD,KAAK,QACLQ,iBAAiB,EACjBC,gBAAiB,GACjBC,eAAgBN,EAChBO,QAASN,EACTO,MAAON,EACP7B,SAAU8B,M,yBCnBKM,E,iDACnBC,OAAS,4C,KAETC,QAAU,+B,KA4CVC,sBAAwB,SAACC,GACvB,MAAO,CACLnE,GAAImE,EAAMnE,GACVoE,WAAYD,EAAMC,WAClBxD,YAAauD,EAAME,aACnB7D,MAAO2D,EAAM3D,MACb8D,cAAeH,EAAMI,eACrB7D,SAAUyD,EAAMzD,SAChBD,WAAY0D,EAAMK,YAClB7D,YAAawD,EAAMM,aACnB7E,SAAUuE,EAAMO,UAChB7D,OAAQsD,EAAMtD,S,iGArDAsD,G,gGAEQQ,MAAMR,G,WAAtBS,E,QAEOC,G,sBACL,IAAIC,MAAJ,0BAA6BX,EAA7B,qBAA+CS,EAAQG,S,uBAGlDH,EAAQI,O,gFAEf,IAAIF,MAAJ,mD,gMAIYX,EAAOZ,G,oGAENhD,KAAK0E,YAAL,UACd1E,KAAK0D,QADS,wBACc1D,KAAKyD,OADnB,iCACkDG,EADlD,iBACgEZ,EADhE,yB,cAAb2B,E,OAGA1B,EAAe0B,EAAKC,cACpBC,EAAUF,EAAKE,QAAQvF,IAAIU,KAAK2D,uB,kBAC/B,CAAEV,eAAc4B,Y,sCAEjB,IAAIN,MAAJ,+C,mSAMgBH,MAAM,GAAD,OAAIpE,KAAK0D,QAAT,4BAAoC1D,KAAKyD,OAAzC,oB,WAArBY,E,QAEOC,G,sBACL,IAAIC,MAAJ,2CAA8CF,EAAQG,S,uBAG3CH,EAAQI,O,cAArBE,E,yBACCA,EAAKxF,Q,wCAEN,IAAIoF,MAAJ,gD,8LAoBWO,EAAgB9B,G,oGAEdhD,KAAK0E,YAAL,UACd1E,KAAK0D,QADS,0BACgBoB,EADhB,wBAC8C9E,KAAKyD,OADnD,gCACiFT,EADjF,6B,cAAb2B,E,OAGA1B,EAAe0B,EAAKC,cACpBC,EAAUF,EAAKE,QAAQvF,IAAIU,KAAK2D,uB,kBAC/B,CAAEV,eAAc4B,Y,sCAEjB,IAAIN,MAAJ,kD,+LAKUQ,EAAS1D,EAAOyD,G,kGAEVV,MAAM,GAAD,OACtBpE,KAAK0D,QADiB,kBACAqB,EADA,kBACiB/E,KAAKyD,OADtB,6BACiDqB,GAC1E,CACEE,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBN,KAAMO,KAAKC,UAAU,CAAE9D,Y,WAPrBgD,E,QAUOC,G,sBACL,IAAIC,MAAJ,wCAA2CF,EAAQG,S,uBAEtCH,EAAQI,O,cAAvBW,E,yBACCA,G,wCAED,IAAIb,MAAJ,iD,2SAOgBH,MAAM,GAAD,OAAIpE,KAAK0D,QAAT,4CAAoD1D,KAAKyD,S,WAA9EY,E,QAEOC,G,sBACL,IAAIC,MAAJ,0DAA6DF,EAAQG,S,uBAGxDH,EAAQI,O,cAAvBW,E,yBACCA,EAAOC,kB,wCAER,IAAId,MAAJ,4D,uHC9FNe,G,yDAiBJ,WAAYlG,GAAQ,IAAD,uBACjB,cAAMA,IAjBRmG,aAAe,IAAI/B,EAgBA,EAqCnBgC,mBAAqB,SAACC,EAAWC,GAAe,IAAD,EACgB,EAAKnD,MAA1DoD,EADqC,EACrCA,UAAWC,EAD0B,EAC1BA,YAAaC,EADa,EACbA,SAAUf,EADG,EACHA,eACtCc,IAAgBF,EAAUE,aACrB,EAAKnD,SAAS,CAAEkD,UAAW,IAGhCA,IAAcD,EAAUC,YAC1B,EAAKG,mBAAmBF,EAAaD,GACrCI,OAAOC,OAAO,EAAG,IAGfH,IAAaH,EAAUG,WACzB,EAAKI,kBAAkBnB,EAAgBe,GACvCE,OAAOC,OAAO,EAAG,KAlDF,EA6DnBE,QAAU,WACR,EAAKzD,SAAS,CACZ0D,OAAO,EACPC,SAAS,KAhEM,EAoEnBC,cAAgB,WACd,EAAKd,aACFe,gBACAC,MAAK,SAACrH,GAAD,OAAgB,EAAKuD,SAAS,CAAEvD,kBACrCsH,MAAM,EAAKN,UAxEG,EA2EnBO,yBAA2B,SAACC,GAC1B,EAAKjE,SAAS,CACZkE,WAAYD,EAAI7B,QAChB+B,kBAAmBF,EAAIzD,aACvBmD,SAAS,KA/EM,EAmFnBN,mBAAqB,SAAClC,EAAOZ,GAC3B,EAAKuC,aAAasB,gBAAgBjD,EAAOZ,GAAMuD,KAAK,EAAKE,0BAA0BD,MAAM,EAAKN,UApF7E,EAuFnB9D,YAAc,SAACf,GACb,KAAIA,EAAMxC,OAAS,GAAnB,CADuB,IAIf8G,EAAc,EAAKvG,MAAnBuG,UACR,EAAKlD,SAAS,CACZmD,YAAavE,IAEf,EAAKyE,mBAAmBzE,EAAOsE,KA/Fd,EAkGnBmB,kBAAoB,SAACnB,GACnB,EAAKlD,SAAS,CAAEkD,eAnGC,EAsGnBoB,iBAAmB,SAAClB,GAClB,EAAKpD,SAAS,CAAEoD,cAvGC,EA0GnBmB,YAAc,WACZ,OACE,kBAAC,IAAD,CAAOC,MAAM,kEAAkEC,WAAY,CAAEC,OAAQ,KACnG,sEACA,8DA9Ga,EAmHnBC,gBAAkB,WAChB,OACE,kBAAC,IAAD,CAAOH,MAAM,kEAAkEC,WAAY,CAAEC,OAAQ,KACnG,6DACA,mFAvHa,EA6HnBE,iBAAmB,SAACX,GAClB,EAAKjE,SAAS,CACZ6E,SAAUZ,EAAI7B,QACd0C,iBAAkBb,EAAIzD,gBAhIP,EAoInBgD,kBAAoB,SAACnB,EAAgB9B,GACnC,EAAKuC,aACFiC,eAAe1C,EAAgB9B,GAC/BuD,MAAK,SAACG,GACL,EAAKW,iBAAiBX,MAEvBF,MAAM,EAAKN,UA1IG,EA8InB3F,gBAAkB,SAACd,EAAI4B,GAAW,IACxByD,EAAmB,EAAKvC,MAAxBuC,eACR,EAAKS,aACFkC,cAAchI,EAAI4B,EAAOyD,GACzByB,KACCmB,IAAaC,QAAQ,CACnB5F,QAAS,kBACTC,YAAa,8BACb4F,SAAU,KAGbpB,MAAM,EAAKN,UAzJG,EA4JnB2B,aAAe,SAACnI,GAAS,IAAD,EACoB,EAAK6C,MAAvCuC,EADc,EACdA,eADc,IACEe,gBADF,MACa,GADb,EAEV,MAARnG,GAAeoF,GACjB,EAAKmB,kBAAkBnB,EAAgBe,IA/JxB,EAoKnBiC,mBAAqB,SAAChD,GACpB,EAAKrC,SAAS,CAAEqC,mBAChBiD,aAAaC,QAAQ,iBAAkBlD,IAtKtB,EAyKnBmD,mBAAqB,WACnB,EAAK1C,aAAa0C,qBAAqB1B,KAAK,EAAKuB,oBAAoBtB,MAAM,EAAKN,UA1K/D,MAEqC,EAAK9G,MAAnD8I,EAFS,EAETA,mBAAoBnF,EAFX,EAEWA,YAAa8C,EAFxB,EAEwBA,SAFxB,OAGjB,EAAKtD,MAAQ,CACXqD,YAAasC,EACbvC,UAAW5C,EACX8C,WACAc,WAAY,GACZC,kBAAmB,KACnBW,iBAAkB,KAClBrI,WAAY,GACZiH,OAAO,EACPC,SAAS,EACTtB,eAAgB,KAChBwC,SAAU,IAdK,E,gEAmBjB,IAAMxC,EAAiBiD,aAAaI,QAAQ,kBAExCrD,EACF9E,KAAKyC,SAAS,CAAEqC,mBAEhB9E,KAAKiI,qBAGPjI,KAAKqG,gBATa,MAU0BrG,KAAKZ,MAAzC8I,EAVU,EAUVA,mBAAoBnF,EAVV,EAUUA,YACpB8C,EAAa7F,KAAKuC,MAAlBsD,SACR7F,KAAK8F,mBAAmBoC,EAAoBnF,GAExC+B,GACF9E,KAAKiG,kBAAkBnB,EAAgBe,K,0CAsBzC7F,KAAKyC,SAAS,CACZ0D,OAAO,EACPC,SAAS,M,+BAoHH,IAAD,OACCtG,EAAYC,IAAZD,QACAsI,EAAYC,IAAZD,QAFD,EAcHpI,KAAKuC,MATP4D,EALK,EAKLA,MACAC,EANK,EAMLA,QACAlH,EAPK,EAOLA,WACAyG,EARK,EAQLA,UACAgB,EATK,EASLA,WACAC,EAVK,EAULA,kBACAf,EAXK,EAWLA,SACAyB,EAZK,EAYLA,SACAC,EAbK,EAaLA,iBAEMxE,EAAgB/C,KAAKZ,MAArB2D,YAER,OAAIoD,EACK,kBAAC,EAAD,MAGLC,EAEA,yBAAKtF,UAAU,WACb,kBAAC,IAAD,CAAM6B,KAAK,WAMf,kBAAC,IAAD,CAAQ7B,UAAU,aAChB,kBAACxC,EAAD,CAAgB+C,MAAOnC,GACrB,kBAAC,IAAD,CAAMoJ,iBAAiB,IAAI3F,KAAK,QAAQ4F,UAAQ,EAACnH,SAAUpB,KAAK6H,cAC9D,kBAACO,EAAD,CAASI,IAAI,SAAS9I,IAAI,KACxB,kBAACI,EAAD,KACE,kBAAC,EAAD,CAAasC,YAAapC,KAAKoC,eAEjC,kBAACtC,EAAD,KACG6G,EAAW9H,OACV,kBAAC,IAAD,CACEiC,UAAU,aACV2H,QAAQ,eACRC,KAAM,CACJC,OAAQ,GACRC,GAAI,GAENC,WAAYlC,EACZmC,WAAY,SAACvJ,GAAD,OACV,kBAAC,EAAD,CACEE,GAAIF,EAAKE,GACTQ,MAAOV,EAAKU,MACZC,WAAYX,EAAKW,WACjBC,SAAUZ,EAAKY,SACfC,YAAab,EAAKa,YAClBf,SAAUE,EAAKF,SACfgB,YAAad,EAAKc,YAClBE,gBAAiB,EAAKA,qBAK5BP,KAAKgH,eAGT,kBAAClH,EAAD,CAASgB,UAAU,YAChB8F,EAAoB,GACnB,kBAAC,EAAD,CACE7D,YAAaA,EACbC,KAAM2C,EACN1C,aAAc2D,EACd1D,aAAclD,KAAK8G,oBAEnB,OAIR,kBAACsB,EAAD,CAASI,IAAI,OAAO9I,IAAI,KACtB,kBAACI,EAAD,KACGwH,EAASzI,OACR,kBAAC,IAAD,CACEiC,UAAU,aACV2H,QAAQ,eACRC,KAAM,CACJC,OAAQ,GACRC,GAAI,GAENC,WAAYvB,EACZwB,WAAY,SAACvJ,GAAD,OACV,kBAAC,EAAD,CACEE,GAAIF,EAAKE,GACTQ,MAAOV,EAAKU,MACZC,WAAYX,EAAKW,WACjBC,SAAUZ,EAAKY,SACfC,YAAab,EAAKa,YAClBf,SAAUE,EAAKF,SACfgB,YAAad,EAAKc,YAClBC,OAAQf,EAAKe,OACbC,gBAAiB,EAAKA,qBAK5BP,KAAKoH,mBAGT,kBAACtH,EAAD,CAASgB,UAAU,YAChByG,EAAmB,GAClB,kBAAC,EAAD,CACExE,YAAaA,EACbC,KAAM6C,EACN5C,aAAcsE,EACdrE,aAAclD,KAAK+G,mBAEnB,c,GA/SFpF,cAAZ2D,EAGG1D,aAAe,CACpBmB,YAAa,EACbmF,mBAAoB,SACpBvC,UANEL,EAMcvC,YAChB8C,SAAU,GAkTCP,ICxUAA,EDwUAA,E,OElUfyD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.9d1a73b2.chunk.js","sourcesContent":["import React from 'react';\n\nconst { Provider: GenresProvider, Consumer: GenresConsumer } = React.createContext();\n\nexport { GenresProvider, GenresConsumer };\n","import React from 'react';\nimport { format } from 'date-fns';\nimport PropTypes from 'prop-types';\nimport { Layout, List, Card, Space, Tag, Rate } from 'antd';\n\nimport { GenresConsumer } from '../ContextGenres';\n\nimport './CardMovie.css';\nimport '../../../node_modules/typeface-inter/inter.css'; // font 'Inter'\n\nclass CardMovie extends React.Component {\n  static defaultProps = {\n    title: '',\n    posterPath: '',\n    overview: '',\n    releaseDate: '',\n    rating: '',\n  };\n\n  static propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    posterPath: PropTypes.string,\n    overview: PropTypes.string,\n    releaseDate: PropTypes.string,\n    genreIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    voteAverage: PropTypes.number.isRequired,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    handleRateMovie: PropTypes.func.isRequired,\n  };\n\n  croppingText = (text) => {\n    if (text.length < 100) {\n      return text;\n    }\n    return `${text.slice(0, text.indexOf(' ', 100))} ...`;\n  };\n\n  croppingTitle = (text) => {\n    if (text.length < 30) {\n      return text;\n    }\n    return `${text.slice(0, text.indexOf(' ', 30))} ...`;\n  };\n\n  renderGenres = (genreNames) => {\n    const { genreIds } = this.props;\n    const genres = genreIds\n      .map((item) => {\n        const [el] = genreNames.filter(({ id }) => item === id);\n        return el;\n      })\n      .slice(0, 3);\n\n    return (\n      <>\n        {genres.map((item) => (\n          <Tag key={item.id}>{item.name}</Tag>\n        ))}\n      </>\n    );\n  };\n\n  ratingColor = (va) => {\n    if (va > 7) return '#66e900';\n    if (va > 5) return '#e9d100';\n    if (va > 3) return '#e97e00';\n    return '#e90000';\n  };\n\n  render() {\n    const { Content } = Layout;\n\n    const { id, title, posterPath, overview, releaseDate, voteAverage, rating, handleRateMovie } = this.props;\n\n    const dateRelise = releaseDate ? format(new Date(releaseDate), 'MMMM dd, yyyy') : '-';\n\n    const classRatingColor = {\n      borderColor: this.ratingColor(voteAverage),\n    };\n\n    return (\n      <List.Item key={id}>\n        <Card\n          className=\"card-movie\"\n          hoverable\n          cover={\n            posterPath ? (\n              <img src={`http://image.tmdb.org/t/p/w185${posterPath}`} alt=\"Poster\" />\n            ) : (\n              <div className=\"no-poster\">\n                <i>No poster</i>\n              </div>\n            )\n          }\n        >\n          <Space direction=\"vertical\">\n            <h5 className=\"card-movie__title\">{this.croppingTitle(title)}</h5>\n            <span className=\"card-movie__date\">{dateRelise}</span>\n            <Content>\n              <GenresConsumer>{(genreNames) => this.renderGenres(genreNames)}</GenresConsumer>\n            </Content>\n            <p className=\"card-movie__overview\">{this.croppingText(overview)}</p>\n            <Rate\n              onChange={(value) => handleRateMovie(id, value)}\n              defaultValue={rating}\n              count={10}\n              allowHalf\n              style={{ fontSize: 15 }}\n              className=\"rate-stars\"\n            />\n            <div className=\"rating\" style={classRatingColor}>\n              {voteAverage}\n            </div>\n          </Space>\n        </Card>\n      </List.Item>\n    );\n  }\n}\n\nexport default CardMovie;\n","import CardMovie from './CardMovie';\r\n\r\nexport default CardMovie;","import ErrorIndicator from './ErrorIndicator';\n\nexport default ErrorIndicator;\n","import React from 'react';\nimport { Alert } from 'antd';\n\nimport './ErrorIndicator.css';\n\nconst ErrorIndicator = () => {\n  return <Alert type=\"error\" message=\"Oops!\" description=\"Something went wrong!\" style={{ width: 300 }} showIcon />;\n};\n\nexport default ErrorIndicator;\n","import SearchMovie from './SearchMovie';\n\nexport default SearchMovie;\n","import React from 'react';\nimport { Input } from 'antd';\nimport { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport ErrorIndicator from '../ErrorIndicator';\n\nimport './SearchMovie.css';\n\nclass SearchMovie extends React.Component {\n  static propTypes = {\n    onDebounced: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    const { onDebounced } = this.props;\n    this.debouncedUpdate = debounce((value) => onDebounced(value), 700);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    const { hasError } = this.state;\n\n    if (hasError) {\n      return (\n        <div className=\"alert_example\">\n          <ErrorIndicator />\n        </div>\n      );\n    }\n\n    return (\n      <Input\n        placeholder=\"Type to search...\"\n        size=\"large\"\n        style={{ width: '100%', margin: '20px 0' }}\n        onChange={({ target: { value } }) => this.debouncedUpdate(value)}\n      />\n    );\n  }\n}\n\nexport default SearchMovie;\n","import PaginationMoviesList from './PaginationMoviesList';\n\nexport default PaginationMoviesList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Pagination } from 'antd';\n\nimport 'antd/dist/antd.css';\nimport './PaginationMoviesList.css';\n\nconst PaginationMoviesList = (props) => {\n  const { defaultPage, page, totalResults, onPageChange } = props;\n\n  return (\n    <Pagination\n      style={{ margin: '10px auto' }}\n      size=\"small\"\n      showSizeChanger={false}\n      defaultPageSize={20}\n      defaultCurrent={defaultPage}\n      current={page}\n      total={totalResults}\n      onChange={onPageChange}\n    />\n  );\n};\n\nPaginationMoviesList.propTypes = {\n  defaultPage: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  totalResults: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default PaginationMoviesList;\n","export default class MovieService {\n  apiKey = '?api_key=05f7db0eb20b02a8803d7f7d0f3fb520';\n\n  baseApi = 'https://api.themoviedb.org/3';\n\n  async getResource(movie) {\n    try {\n      const resolve = await fetch(movie);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch ${movie} received ${resolve.status}`);\n      }\n\n      return await resolve.json();\n    } catch (error) {\n      throw new Error(`There is an error in getting resources -> `, error);\n    }\n  }\n\n  async getSearchMovies(movie, page) {\n    try {\n      const body = await this.getResource(\n        `${this.baseApi}/search/movie${this.apiKey}&language=en-US&query=${movie}&page=${page}&include_adult=false`\n      );\n      const totalResults = body.total_results;\n      const results = body.results.map(this.transformSearchMovies);\n      return { totalResults, results };\n    } catch (error) {\n      throw new Error(`There is an error in search movies -> `, error);\n    }\n  }\n\n  async getGenreNames() {\n    try {\n      const resolve = await fetch(`${this.baseApi}/genre/movie/list${this.apiKey}&language=en-US`);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch 'genre' received ${resolve.status}`);\n      }\n\n      const body = await resolve.json();\n      return body.genres;\n    } catch (error) {\n      throw new Error(`There is an error in getting genres -> `, error);\n    }\n  }\n\n  transformSearchMovies = (movie) => {\n    return {\n      id: movie.id,\n      popularity: movie.popularity,\n      voteAverage: movie.vote_average,\n      title: movie.title,\n      originalTitle: movie.original_title,\n      overview: movie.overview,\n      posterPath: movie.poster_path,\n      releaseDate: movie.release_date,\n      genreIds: movie.genre_ids,\n      rating: movie.rating,\n    };\n  };\n\n  // Get Rated Movies\n  async getRatedMovies(guestSessionID, page) {\n    try {\n      const body = await this.getResource(\n        `${this.baseApi}/guest_session/${guestSessionID}/rated/movies${this.apiKey}&language=en-US&page=${page}&sort_by=created_at.desc`\n      );\n      const totalResults = body.total_results;\n      const results = body.results.map(this.transformSearchMovies);\n      return { totalResults, results };\n    } catch (error) {\n      throw new Error(`There is an error in get rated movies -> `, error);\n    }\n  }\n\n  // Rated Movies\n  async postRateMovie(movieId, value, guestSessionID) {\n    try {\n      const resolve = await fetch(\n        `${this.baseApi}/movie/${movieId}/rating${this.apiKey}&guest_session_id=${guestSessionID}`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json;charset=utf-8',\n          },\n          body: JSON.stringify({ value }),\n        }\n      );\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch RATE received ${resolve.status}`);\n      }\n      const result = await resolve.json();\n      return result;\n    } catch (error) {\n      throw new Error(`There is an error in post rate movie -> `, error);\n    }\n  }\n\n  // Create Guest Session\n  async createGuestSession() {\n    try {\n      const resolve = await fetch(`${this.baseApi}/authentication/guest_session/new${this.apiKey}`);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch 'Create Guest Session' received ${resolve.status}`);\n      }\n\n      const result = await resolve.json();\n      return result.guest_session_id;\n    } catch (error) {\n      throw new Error(`There is an error in creating new guest session -> `, error);\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport { Layout, List, Spin, Empty, Tabs, notification } from 'antd';\nimport PropTypes from 'prop-types';\n\nimport CardMovie from '../CardMovie';\nimport SearchMovie from '../SearchMovie';\nimport ErrorIndicator from '../ErrorIndicator';\nimport PaginationMoviesList from '../PaginationMoviesList';\n\nimport { GenresProvider } from '../ContextGenres';\n\nimport MovieService from '../../movie-service/movie-service';\n\nimport 'antd/dist/antd.css';\n\nimport './App.css';\n\nclass App extends Component {\n  movieService = new MovieService();\n\n  static defaultProps = {\n    defaultPage: 1,\n    defaultSearchMovie: 'return',\n    moviePage: this.defaultPage,\n    ratePage: 1,\n  };\n\n  static propTypes = {\n    moviePage: PropTypes.number,\n    ratePage: PropTypes.number,\n    defaultPage: PropTypes.number,\n    defaultSearchMovie: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n    const { defaultSearchMovie, defaultPage, ratePage } = this.props;\n    this.state = {\n      searchMovie: defaultSearchMovie,\n      moviePage: defaultPage,\n      ratePage,\n      moviesList: [],\n      movieTotalResults: null,\n      rateTotalResults: null,\n      genreNames: [],\n      error: false,\n      loading: true,\n      guestSessionID: null,\n      rateList: [],\n    };\n  }\n\n  componentDidMount() {\n    const guestSessionID = localStorage.getItem('guestSessionID');\n\n    if (guestSessionID) {\n      this.setState({ guestSessionID });\n    } else {\n      this.createGuestSession();\n    }\n\n    this.addGenreNames();\n    const { defaultSearchMovie, defaultPage } = this.props;\n    const { ratePage } = this.state;\n    this.updateSearchMovies(defaultSearchMovie, defaultPage);\n\n    if (guestSessionID) {\n      this.updateRatedMovies(guestSessionID, ratePage);\n    }\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    const { moviePage, searchMovie, ratePage, guestSessionID } = this.state;\n    if (searchMovie !== prevState.searchMovie) {\n      (() => this.setState({ moviePage: 1 }))();\n    }\n\n    if (moviePage !== prevState.moviePage) {\n      this.updateSearchMovies(searchMovie, moviePage);\n      window.scroll(0, 0);\n    }\n\n    if (ratePage !== prevState.ratePage) {\n      this.updateRatedMovies(guestSessionID, ratePage);\n      window.scroll(0, 0);\n    }\n  };\n\n  componentDidCatch() {\n    this.setState({\n      error: true,\n      loading: false,\n    });\n  }\n\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false,\n    });\n  };\n\n  addGenreNames = () => {\n    this.movieService\n      .getGenreNames()\n      .then((genreNames) => this.setState({ genreNames }))\n      .catch(this.onError);\n  };\n\n  onSearchMoviesListLoaded = (res) => {\n    this.setState({\n      moviesList: res.results,\n      movieTotalResults: res.totalResults,\n      loading: false,\n    });\n  };\n\n  updateSearchMovies = (movie, page) => {\n    this.movieService.getSearchMovies(movie, page).then(this.onSearchMoviesListLoaded).catch(this.onError);\n  };\n\n  onDebounced = (value) => {\n    if (value.length < 1) {\n      return;\n    }\n    const { moviePage } = this.props;\n    this.setState({\n      searchMovie: value,\n    });\n    this.updateSearchMovies(value, moviePage);\n  };\n\n  onMoviePageChange = (moviePage) => {\n    this.setState({ moviePage });\n  };\n\n  onRatePageChange = (ratePage) => {\n    this.setState({ ratePage });\n  };\n\n  renderEmpty = () => {\n    return (\n      <Empty image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\" imageStyle={{ height: 60 }}>\n        <h6>The search did not return any results.</h6>\n        <span>Try changing your request.</span>\n      </Empty>\n    );\n  };\n\n  renderEmptyRate = () => {\n    return (\n      <Empty image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\" imageStyle={{ height: 60 }}>\n        <h6>You haven&apos;t rated movies yet.</h6>\n        <span>Rate the movie and it will appear on this list.</span>\n      </Empty>\n    );\n  };\n\n  // getRatedMovies\n  onRateListLoaded = (res) => {\n    this.setState({\n      rateList: res.results,\n      rateTotalResults: res.totalResults,\n    });\n  };\n\n  updateRatedMovies = (guestSessionID, page) => {\n    this.movieService\n      .getRatedMovies(guestSessionID, page)\n      .then((res) => {\n        this.onRateListLoaded(res);\n      })\n      .catch(this.onError);\n  };\n\n  // Rated Movie\n  handleRateMovie = (id, value) => {\n    const { guestSessionID } = this.state;\n    this.movieService\n      .postRateMovie(id, value, guestSessionID)\n      .then(\n        notification.success({\n          message: 'Rating received',\n          description: 'Movie added to the Rate tab',\n          duration: 2,\n        })\n      )\n      .catch(this.onError);\n  };\n\n  onChangeTabs = (key) => {\n    const { guestSessionID, ratePage = '' } = this.state;\n    if (key === '2' && guestSessionID) {\n      this.updateRatedMovies(guestSessionID, ratePage);\n    }\n  };\n\n  // Create Guest Session\n  updateGuestSession = (guestSessionID) => {\n    this.setState({ guestSessionID });\n    localStorage.setItem('guestSessionID', guestSessionID);\n  };\n\n  createGuestSession = () => {\n    this.movieService.createGuestSession().then(this.updateGuestSession).catch(this.onError);\n  };\n\n  render() {\n    const { Content } = Layout;\n    const { TabPane } = Tabs;\n\n    const {\n      error,\n      loading,\n      genreNames,\n      moviePage,\n      moviesList,\n      movieTotalResults,\n      ratePage,\n      rateList,\n      rateTotalResults,\n    } = this.state;\n    const { defaultPage } = this.props;\n\n    if (error) {\n      return <ErrorIndicator />;\n    }\n\n    if (loading) {\n      return (\n        <div className=\"example\">\n          <Spin size=\"large\" />\n        </div>\n      );\n    }\n\n    return (\n      <Layout className=\"container\">\n        <GenresProvider value={genreNames}>\n          <Tabs defaultActiveKey=\"1\" size=\"large\" centered onChange={this.onChangeTabs}>\n            <TabPane tab=\"Search\" key=\"1\">\n              <Content>\n                <SearchMovie onDebounced={this.onDebounced} />\n              </Content>\n              <Content>\n                {moviesList.length ? (\n                  <List\n                    className=\"list-align\"\n                    justify=\"space-around\"\n                    grid={{\n                      gutter: 36,\n                      md: 2,\n                    }}\n                    dataSource={moviesList}\n                    renderItem={(item) => (\n                      <CardMovie\n                        id={item.id}\n                        title={item.title}\n                        posterPath={item.posterPath}\n                        overview={item.overview}\n                        releaseDate={item.releaseDate}\n                        genreIds={item.genreIds}\n                        voteAverage={item.voteAverage}\n                        handleRateMovie={this.handleRateMovie}\n                      />\n                    )}\n                  />\n                ) : (\n                  this.renderEmpty()\n                )}\n              </Content>\n              <Content className=\"centered\">\n                {movieTotalResults > 20 ? (\n                  <PaginationMoviesList\n                    defaultPage={defaultPage}\n                    page={moviePage}\n                    totalResults={movieTotalResults}\n                    onPageChange={this.onMoviePageChange}\n                  />\n                ) : null}\n              </Content>\n            </TabPane>\n\n            <TabPane tab=\"Rate\" key=\"2\">\n              <Content>\n                {rateList.length ? (\n                  <List\n                    className=\"list-align\"\n                    justify=\"space-around\"\n                    grid={{\n                      gutter: 36,\n                      md: 2,\n                    }}\n                    dataSource={rateList}\n                    renderItem={(item) => (\n                      <CardMovie\n                        id={item.id}\n                        title={item.title}\n                        posterPath={item.posterPath}\n                        overview={item.overview}\n                        releaseDate={item.releaseDate}\n                        genreIds={item.genreIds}\n                        voteAverage={item.voteAverage}\n                        rating={item.rating}\n                        handleRateMovie={this.handleRateMovie}\n                      />\n                    )}\n                  />\n                ) : (\n                  this.renderEmptyRate()\n                )}\n              </Content>\n              <Content className=\"centered\">\n                {rateTotalResults > 20 ? (\n                  <PaginationMoviesList\n                    defaultPage={defaultPage}\n                    page={ratePage}\n                    totalResults={rateTotalResults}\n                    onPageChange={this.onRatePageChange}\n                  />\n                ) : null}\n              </Content>\n            </TabPane>\n          </Tabs>\n        </GenresProvider>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}