{"version":3,"sources":["components/ContextGenres/ContextGenres.js","components/CardMovie/CardMovie.jsx","components/CardMovie/index.js","components/SearchMovie/index.js","components/SearchMovie/SearchMovie.jsx","components/PaginationMoviesList/index.js","components/PaginationMoviesList/PaginationMoviesList.jsx","movie-service/movie-service.js","components/App/App.jsx","components/App/index.js","index.js"],"names":["React","createContext","GenresProvider","Provider","GenresConsumer","Consumer","CardMovie","croppingText","text","length","slice","indexOf","croppingTitle","renderGenres","genreNames","genres","props","genreIds","map","item","filter","id","key","name","ratingColor","va","Content","Layout","this","title","posterPath","overview","releaseDate","voteAverage","rating","handleRateMovie","dateRelise","format","Date","classRatingColor","borderColor","Item","className","hoverable","cover","src","alt","direction","onChange","value","defaultValue","count","allowHalf","style","fontSize","Component","defaultProps","SearchMovie","onDebounced","debouncedUpdate","debounce","placeholder","size","width","margin","target","PaginationMoviesList","defaultPage","page","totalResults","onPageChange","showSizeChanger","defaultPageSize","defaultCurrent","current","total","MovieService","apiKey","baseApi","transformSearchMovies","movie","popularity","vote_average","originalTitle","original_title","poster_path","release_date","genre_ids","fetch","resolve","ok","Error","status","json","getResource","body","total_results","results","guestSessionID","movieId","method","headers","JSON","stringify","result","guest_session_id","App","movieService","componentDidUpdate","prevProps","prevState","state","moviePage","searchMovie","ratePage","setState","updateSearchMovies","window","scroll","updateRatedMovies","onError","error","loading","addGenreNames","getGenreNames","then","catch","onSearchMoviesListLoaded","res","moviesList","movieTotalResults","getSearchMovies","onMoviePageChange","onRatePageChange","renderEmpty","image","imageStyle","height","renderEmptyRate","onRateListLoaded","rateList","rateTotalResults","getRatedMovies","postRateMovie","notification","success","message","description","duration","onChangeTabs","defaultSearchMovie","TabPane","Tabs","type","showIcon","defaultActiveKey","centered","tab","justify","grid","gutter","md","dataSource","renderItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84b76022.chunk.js","sourcesContent":["import React from 'react';\n\nconst { Provider: GenresProvider, Consumer: GenresConsumer } = React.createContext();\n\nexport { GenresProvider, GenresConsumer };\n","import React from 'react';\nimport { Layout, List, Card, Space, Tag, Rate } from 'antd';\nimport { format } from 'date-fns';\nimport PropTypes from 'prop-types';\n\nimport { GenresConsumer } from '../ContextGenres';\n\nimport './CardMovie.css';\nimport '../../../node_modules/typeface-inter/inter.css'; // font 'Inter'\n\nclass CardMovie extends React.Component {\n  static defaultProps = {\n    title: '',\n    posterPath: '',\n    overview: '',\n    releaseDate: '',\n    rating: '',\n  };\n\n  static propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    posterPath: PropTypes.string,\n    overview: PropTypes.string,\n    releaseDate: PropTypes.string,\n    genreIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    voteAverage: PropTypes.number.isRequired,\n    rating: PropTypes.number,\n    handleRateMovie: PropTypes.func.isRequired,\n  };\n\n  croppingText = (text) => {\n    if (text.length < 100) {\n      return text;\n    }\n    return `${text.slice(0, text.indexOf(' ', 100))} ...`;\n  };\n\n  croppingTitle = (text) => {\n    if (text.length < 30) {\n      return text;\n    }\n    return `${text.slice(0, text.indexOf(' ', 30))} ...`;\n  };\n\n  /* transformGenreName = (genreId) => {\n    const { genreNames } = this.props;\n    const [el] = genreNames.filter(({ id }) => genreId === id);\n    return el.name;\n  }; */\n\n  renderGenres = (genreNames) => {\n    const { genreIds } = this.props;\n    const genres = genreIds\n      .map((item) => {\n        const [el] = genreNames.filter(({ id }) => item === id);\n        return el;\n      })\n      .slice(0, 3);\n\n    return (\n      <>\n        {genres.map((item) => (\n          <Tag key={item.id}>{item.name}</Tag>\n        ))}\n      </>\n    );\n  };\n\n  ratingColor = (va) => {\n    if (va > 7) return '#66e900';\n    if (va > 5) return '#e9d100';\n    if (va > 3) return '#e97e00';\n    return '#e90000';\n  };\n\n  render() {\n    const { Content } = Layout;\n\n    const { id, title, posterPath, overview, releaseDate, voteAverage, rating, handleRateMovie } = this.props;\n\n    const dateRelise = releaseDate ? format(new Date(releaseDate), 'MMMM dd, yyyy') : '-';\n\n    const classRatingColor = {\n      borderColor: this.ratingColor(voteAverage),\n    };\n\n    return (\n      <List.Item key={id}>\n        <Card\n          className=\"card-movie\"\n          hoverable\n          cover={\n            posterPath ? (\n              <img src={`http://image.tmdb.org/t/p/w185${posterPath}`} alt=\"Poster\" />\n            ) : (\n              <div className=\"no-poster\">\n                <i>No poster</i>\n              </div>\n            )\n          }\n        >\n          <Space direction=\"vertical\">\n            <h5 className=\"card-movie__title\">{this.croppingTitle(title)}</h5>\n            <span className=\"card-movie__date\">{dateRelise}</span>\n            <Content>\n              <GenresConsumer>{(genreNames) => this.renderGenres(genreNames)}</GenresConsumer>\n            </Content>\n            <p className=\"card-movie__overview\">{this.croppingText(overview)}</p>\n            <Rate\n              onChange={(value) => handleRateMovie(id, value)}\n              // defaultValue={rating ? rating : ''}\n              defaultValue={rating}\n              count={10}\n              allowHalf\n              style={{ fontSize: 15 }}\n              className=\"rate-stars\"\n            />\n            <div className=\"rating\" style={classRatingColor}>\n              {voteAverage}\n            </div>\n          </Space>\n        </Card>\n      </List.Item>\n    );\n  }\n}\n\nexport default CardMovie;\n","import CardMovie from './CardMovie';\r\n\r\nexport default CardMovie;","import SearchMovie from './SearchMovie';\n\nexport default SearchMovie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { debounce } from 'lodash';\n\nimport { Input } from 'antd';\nimport './SearchMovie.css';\n\nclass SearchMovie extends React.Component {\n  static propTypes = {\n    onDebounced: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    const { onDebounced } = this.props;\n    this.debouncedUpdate = debounce((value) => onDebounced(value), 1500);\n  }\n\n  render() {\n    return (\n      <Input\n        placeholder=\"Type to search...\"\n        size=\"large\"\n        style={{ width: '100%', margin: '20px 0' }}\n        onChange={({ target: { value } }) => this.debouncedUpdate(value)}\n      />\n    );\n  }\n}\n\nexport default SearchMovie;\n","import PaginationMoviesList from './PaginationMoviesList';\n\nexport default PaginationMoviesList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Pagination } from 'antd';\nimport 'antd/dist/antd.css';\nimport './PaginationMoviesList.css';\n\nconst PaginationMoviesList = (props) => {\n  const { defaultPage, page, totalResults, onPageChange } = props;\n\n  return (\n    <Pagination\n      style={{ margin: '10px auto' }}\n      size=\"small\"\n      showSizeChanger={false}\n      defaultPageSize={20}\n      defaultCurrent={defaultPage}\n      current={page}\n      total={totalResults}\n      onChange={onPageChange}\n    />\n  );\n};\n\nPaginationMoviesList.propTypes = {\n  defaultPage: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  totalResults: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default PaginationMoviesList;\n","export default class MovieService {\n  apiKey = '?api_key=05f7db0eb20b02a8803d7f7d0f3fb520';\n\n  baseApi = 'https://api.themoviedb.org/3';\n\n  async getResource(movie) {\n    try {\n      const resolve = await fetch(movie);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch ${movie} received ${resolve.status}`);\n      }\n\n      return await resolve.json();\n    } catch (error) {\n      throw new Error(`There is an error in getting resources -> `, error);\n    }\n  }\n\n  async getSearchMovies(movie, page) {\n    try {\n      const body = await this.getResource(\n        `${this.baseApi}/search/movie${this.apiKey}&language=en-US&query=${movie}&page=${page}&include_adult=false`\n      );\n      const totalResults = body.total_results;\n      const results = body.results.map(this.transformSearchMovies);\n      return { totalResults, results };\n    } catch (error) {\n      throw new Error(`There is an error in search movies -> `, error);\n    }\n  }\n\n  async getGenreNames() {\n    try {\n      const resolve = await fetch(`${this.baseApi}/genre/movie/list${this.apiKey}&language=en-US`);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch 'genre' received ${resolve.status}`);\n      }\n\n      const body = await resolve.json();\n      return body.genres;\n    } catch (error) {\n      throw new Error(`There is an error in getting genres -> `, error);\n    }\n  }\n\n  transformSearchMovies = (movie) => {\n    return {\n      id: movie.id,\n      popularity: movie.popularity,\n      voteAverage: movie.vote_average,\n      title: movie.title,\n      originalTitle: movie.original_title,\n      overview: movie.overview,\n      posterPath: movie.poster_path,\n      releaseDate: movie.release_date,\n      genreIds: movie.genre_ids,\n      rating: movie.rating,\n    };\n  };\n\n  // Get Rated Movies\n\n  async getRatedMovies(guestSessionID, page) {\n    try {\n      const body = await this.getResource(\n        `${this.baseApi}/guest_session/${guestSessionID}/rated/movies${this.apiKey}&language=en-US&page=${page}&sort_by=created_at.desc`\n      );\n      const totalResults = body.total_results;\n      const results = body.results.map(this.transformSearchMovies);\n      return { totalResults, results };\n    } catch (error) {\n      throw new Error(`There is an error in get rated movies -> `, error);\n    }\n  }\n\n  // Rate Movies\n\n  async postRateMovie(movieId, value, guestSessionID) {\n    try {\n      const resolve = await fetch(\n        `${this.baseApi}/movie/${movieId}/rating${this.apiKey}&guest_session_id=${guestSessionID}`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json;charset=utf-8',\n          },\n          body: JSON.stringify({ value }),\n        }\n      );\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch RATE received ${resolve.status}`);\n      }\n      const result = await resolve.json();\n      return result;\n    } catch (error) {\n      throw new Error(`There is an error in post rate movie -> `, error);\n    }\n  }\n\n  // Create Guest Session\n\n  async createGuestSession() {\n    try {\n      const resolve = await fetch(`${this.baseApi}/authentication/guest_session/new${this.apiKey}`);\n\n      if (!resolve.ok) {\n        throw new Error(`Could not fetch 'Create Guest Session' received ${resolve.status}`);\n      }\n\n      const result = await resolve.json();\n      return result.guest_session_id;\n    } catch (error) {\n      throw new Error(`There is an error in creating new guest session -> `, error);\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport { Layout, List, Spin, Alert, Empty, Tabs, notification } from 'antd';\nimport PropTypes from 'prop-types';\n\nimport CardMovie from '../CardMovie';\nimport SearchMovie from '../SearchMovie';\nimport PaginationMoviesList from '../PaginationMoviesList';\n\nimport { GenresProvider } from '../ContextGenres';\n\nimport MovieService from '../../movie-service/movie-service';\n\nimport 'antd/dist/antd.css';\n\nimport './App.css';\n\nclass App extends Component {\n  movieService = new MovieService();\n\n  static defaultProps = {\n    defaultPage: 1,\n    defaultSearchMovie: 'return',\n    moviePage: this.defaultPage,\n    ratePage: 1,\n    guestSessionID: '73e66455e4e0df85aa0d12388cf9f527', // убрать при включении гостевой сессии\n    // guestSessionID: 'ade831dc162d9f2b5b7f92021f4be6af'\n    // guestSessionID: ''\n  };\n\n  static propTypes = {\n    moviePage: PropTypes.number,\n    ratePage: PropTypes.number,\n    defaultPage: PropTypes.number,\n    defaultSearchMovie: PropTypes.string,\n    guestSessionID: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n    const { defaultSearchMovie, defaultPage, ratePage, guestSessionID } = this.props;\n    this.state = {\n      searchMovie: defaultSearchMovie,\n      moviePage: defaultPage,\n      ratePage,\n      moviesList: [],\n      movieTotalResults: null,\n      rateTotalResults: null,\n      genreNames: [],\n      error: false,\n      loading: true,\n      guestSessionID, // убрать при создании гостевой сессии\n      // guestSessionID: null, // раскомментировать при включении гостевой сессии\n      rateList: [],\n    };\n  }\n\n  componentDidMount() {\n    // handleCreateGuestSession вызывать через условие.\n    // Времено отключено, для создания сессий при перезагрузке страницы.\n    // НЕ УДАЛЯТЬ!!!\n    // this.handleCreateGuestSession();\n\n    this.addGenreNames(); // Закомментировано на время настройки провайдера\n    const { defaultSearchMovie, defaultPage } = this.props;\n    const { guestSessionID, ratePage } = this.state;\n    this.updateSearchMovies(defaultSearchMovie, defaultPage);\n    if (guestSessionID) {\n      this.updateRatedMovies(guestSessionID, ratePage);\n    } /* else {\n      this.renderEmptyRate();\n    } */\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    const { moviePage, searchMovie, ratePage, guestSessionID } = this.state;\n    if (searchMovie !== prevState.searchMovie) {\n      (() => this.setState({ moviePage: 1 }))();\n    }\n\n    if (moviePage !== prevState.moviePage) {\n      this.updateSearchMovies(searchMovie, moviePage);\n      window.scroll(0, 0);\n    }\n\n    if (ratePage !== prevState.ratePage) {\n      this.updateRatedMovies(guestSessionID, ratePage);\n      window.scroll(0, 0);\n    }\n  };\n\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false,\n    });\n  };\n\n  addGenreNames = () => {\n    this.movieService\n      .getGenreNames()\n      .then((genreNames) => this.setState({ genreNames }))\n      .catch(this.onError);\n  };\n\n  onSearchMoviesListLoaded = (res) => {\n    this.setState({\n      moviesList: res.results,\n      movieTotalResults: res.totalResults,\n      loading: false,\n    });\n  };\n\n  updateSearchMovies = (movie, page) => {\n    this.movieService.getSearchMovies(movie, page).then(this.onSearchMoviesListLoaded).catch(this.onError);\n  };\n\n  onDebounced = (value) => {\n    if (value.length < 1) {\n      return;\n    }\n    const { moviePage } = this.props;\n    this.setState({\n      searchMovie: value,\n    });\n    this.updateSearchMovies(value, moviePage);\n  };\n\n  onMoviePageChange = (moviePage) => {\n    this.setState({ moviePage });\n  };\n\n  onRatePageChange = (ratePage) => {\n    this.setState({ ratePage });\n  };\n\n  renderEmpty = () => {\n    return (\n      <Empty image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\" imageStyle={{ height: 60 }}>\n        <h6>The search did not return any results.</h6>\n        <span>Try changing your request.</span>\n      </Empty>\n    );\n  };\n\n  renderEmptyRate = () => {\n    return (\n      <Empty image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\" imageStyle={{ height: 60 }}>\n        <h6>You haven&apos;t rated movies yet.</h6>\n        <span>Rate the movie and it will appear on this list.</span>\n      </Empty>\n    );\n  };\n\n  // getRatedMovies\n  onRateListLoaded = (res) => {\n    this.setState({\n      rateList: res.results,\n      rateTotalResults: res.totalResults,\n    });\n  };\n\n  updateRatedMovies = (guestSessionID, page) => {\n    this.movieService\n      .getRatedMovies(guestSessionID, page)\n      .then((res) => {\n        this.onRateListLoaded(res);\n      })\n      .catch(this.onError);\n  };\n\n  // Rate Movie\n  handleRateMovie = (id, value) => {\n    const { guestSessionID } = this.state;\n    this.movieService\n      .postRateMovie(id, value, guestSessionID)\n      .then(\n        notification.success({\n          message: 'Rating received',\n          description: 'Movie added to the Rate tab',\n          duration: 2,\n        })\n      )\n      .catch(this.onError);\n  };\n\n  onChangeTabs = (key) => {\n    const { guestSessionID, ratePage = '' } = this.state;\n    if (key === '2' && guestSessionID) {\n      this.updateRatedMovies(guestSessionID, ratePage);\n    }\n  };\n\n  // Create Guest Session\n  // Временно отключено\n  // НЕ УАЛЯТЬ!!!\n  /* \n  updateGuestSession = (guestSessionID) => {\n    this.setState({ guestSessionID });\n  }\n\n  handleCreateGuestSession = () => {\n    this.movieService\n      .createGuestSession()\n        .then(this.updateGuestSession)\n        .then(() => console.log('this.state.guestSessionID -> ', this.state.guestSessionID))\n        .catch(this.onError);\n  }\n*/\n\n  render() {\n    const { Content } = Layout;\n    const { TabPane } = Tabs;\n\n    const {\n      error,\n      loading,\n      genreNames,\n      moviePage,\n      moviesList,\n      movieTotalResults,\n      ratePage,\n      rateList,\n      rateTotalResults,\n    } = this.state;\n    const { defaultPage } = this.props;\n\n    if (error) {\n      return (\n        <div className=\"alert_example\">\n          <Alert\n            type=\"warning\"\n            message=\"Oops!\"\n            description=\"Something went wrong!\"\n            style={{ width: 300, fontSize: 18 }}\n            showIcon\n          />\n        </div>\n      );\n    }\n\n    if (loading) {\n      return (\n        <div className=\"example\">\n          <Spin size=\"large\" />\n        </div>\n      );\n    }\n\n    return (\n      <Layout className=\"container\">\n        <GenresProvider value={genreNames}>\n          <Tabs defaultActiveKey=\"1\" size=\"large\" centered onChange={this.onChangeTabs}>\n            <TabPane tab=\"Search\" key=\"1\">\n              <Content>\n                <SearchMovie onDebounced={this.onDebounced} />\n              </Content>\n              <Content>\n                {moviesList.length ? (\n                  <List\n                    className=\"list-align\"\n                    justify=\"space-around\"\n                    grid={{\n                      gutter: 36,\n                      md: 2,\n                    }}\n                    dataSource={moviesList}\n                    renderItem={(item) => (\n                      <CardMovie\n                        id={item.id}\n                        title={item.title}\n                        posterPath={item.posterPath}\n                        overview={item.overview}\n                        releaseDate={item.releaseDate}\n                        genreIds={item.genreIds}\n                        voteAverage={item.voteAverage}\n                        handleRateMovie={this.handleRateMovie}\n                      />\n                    )}\n                  />\n                ) : (\n                  this.renderEmpty()\n                )}\n              </Content>\n              <Content className=\"centered\">\n                {movieTotalResults > 20 ? (\n                  <PaginationMoviesList\n                    defaultPage={defaultPage}\n                    page={moviePage}\n                    totalResults={movieTotalResults}\n                    onPageChange={this.onMoviePageChange}\n                  />\n                ) : null}\n              </Content>\n            </TabPane>\n\n            <TabPane tab=\"Rate\" key=\"2\">\n              <Content>\n                {rateList.length ? (\n                  <List\n                    className=\"list-align\"\n                    justify=\"space-around\"\n                    grid={{\n                      gutter: 36,\n                      md: 2,\n                    }}\n                    dataSource={rateList}\n                    renderItem={(item) => (\n                      <CardMovie\n                        id={item.id}\n                        title={item.title}\n                        posterPath={item.posterPath}\n                        overview={item.overview}\n                        releaseDate={item.releaseDate}\n                        genreIds={item.genreIds}\n                        voteAverage={item.voteAverage}\n                        rating={item.rating}\n                        handleRateMovie={this.handleRateMovie}\n                      />\n                    )}\n                  />\n                ) : (\n                  this.renderEmptyRate()\n                )}\n              </Content>\n              <Content className=\"centered\">\n                {rateTotalResults > 20 ? (\n                  <PaginationMoviesList\n                    defaultPage={defaultPage}\n                    page={ratePage}\n                    totalResults={rateTotalResults}\n                    onPageChange={this.onRatePageChange}\n                  />\n                ) : null}\n              </Content>\n            </TabPane>\n          </Tabs>\n        </GenresProvider>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}